AULA_2: O que é e para que serve

    "Análise de Dados (seja para DataScience, seja para trabalhar de forma integrada com arquivos em Excel e Banco de Dados)"
    "Melhor biblioteca/módulo para trabalhar com quantidades enormes de informações"
    "Uma mistura de listas e dicionários de forma muito eficiente"


AULA_3: Pandas e csv

    "Quase sempre quando formos "ler" um arquivo csv, vamos usar o pandas. É prático e bem eficiente."

    Strutura basica para criar um DataFrame:
        vendas_df = pd.read_csv('Contoso - Vendas - 2017.csv', sep=';')


AULA_4: Dataframe do pandas

    As colunas funcionam "como chaves de dicionário"
    As linhas funcionam "como listas"
    
    Algumas Regras:
        vendas_df['coluna_x'] -> uma lista com os valores da coluna_x (em formato dataframe, é um dataframe com 1 coluna só)
        vendas_df[0] -> NÃO FUNCIONA ASSIM PARA DATAFRAMES
        vendas_df[:3] -> pega até a linha de índice 3 do dataframe
        vendas_df[['coluna_x', 'coluna_y', 'coluna_z']] -> cria um novo dataframe com as colunas coluna_x, coluna_y e coluna_z
        vendas_df['coluna_x'][0] -> pega o itemd a 1ª linha da coluna coluna_x
    

AULA_5: Tratamento de Dados e Múltiplas Bases

    às vezes precisaremos mudar o encoding. Possiveis valores para testar:
        encoding='latin1', encoding='ISO-8859-1', encoding='utf-8' ou então encoding='cp1252'
    
    display para ver todos os dataframes
        display(vendas_df)

    Reomver colunas:
        Drop:
            "Romove tanto Linhas quanto Colunas, o que vai difertenciar é o AXIS"
            clientes_df.drop(['Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10'], axis=0) ->Remove Linhas
            clientes_df.drop(['Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10'], axis=1) -> Remove Colunas
    OU
        DataFrame Selecionando Colunas:
            clientes_df = clientes_df[['ÿID Cliente', 'E-mail']]

    Mesclar Tabelas:
        "Colunas da mesclagem precisam ter o mesmo nome"
        vendas_df = vendas_df.merge(produtos_df, on='ID Produto')

    Renomear Colunas:
        "Necessario para o Merge caso esteja diferente"
        clientes_df = clientes_df.rename(columns={'ÿID Cliente': 'ID Cliente'})
        "Se atentar ao columns"


AULA_6: Análises e Visualização de Dados no pandas (Parte 1)

    Exercicio OK
        .value_counts() para contar quantas vezes cada valor do Dataframe aparece
        .plot() para exibir um gráfico


AULA_7: Análises e Visualização de Dados no pandas (Parte 2)

    Exercicio OK
        .groupby para agrupar o nosso dataframe, de acordo com o que queremos (somando as quantidades de vendas, por exemplo)
        Ordenar o dataframe em ordem decrescente de Quantidade Vendida
            .sort_values
        Pegar o Maior valor diretamente
            .max() e .idxmax()


AULA_8: Filtrando um DataFrame

    "Para filtrarmos, precisamos criar um outro DataFrame com o filtro (Nome coluna, Valor)"
        loja_europeonline = vendas_df[vendas_df['ID Loja'] == 306]
    
    Funcionamento do filtro:
        loja_306 = vendas_df['ID Loja'] == 306
        "cria um dataframe onda vai comparando linha por linha e retorna os valores true para o filtro"
    
    Multiplos filtros:
        loja_europeonline = vendas_df[(vendas_df['ID Loja'] == 306) & (vendas_df['Quantidade Devolvida'] == 0)] 
            "Parenteses necessarios nos multiplos filtros para isolar cada um"
        
            loja_306 = vendas_df['ID Loja'] == 306
            qtd_delvolvida_0 = vendas_df['Quantidade Devolvida'] == 0
        loja_europeonline = vendas_df[loja_306 & qtd_delvolvida_0]


AULA_9: Adicionando e Modificando Colunas DataFrame

    Convertendo string em data:
        vendas_df['Data da Venda'] = pd.to_datetime(vendas_df['Data da Venda'], format='%d/%m/%Y')
    Adcionando coluna de ano:
        vendas_df['Ano da Venda'] = vendas_df['Data da Venda'].dt.year
    Adcionando coluna de mes:
        vendas_df['Mes da Venda'] = vendas_df['Data da Venda'].dt.month
    Adcionando coluna de dia:
        vendas_df['Dia da Venda'] = vendas_df['Data da Venda'].dt.day


AULA_10: Modificando e Consultando Valores em DataFrame

    Consultando apenas primeiros valores de um Datarame:
        display(novo_produtos_df.head())
    
    loc:
        permite pegar uma linha de acordo com o índice dela. Ele dá erro caso não encontre o índice. 
        Isso é interessante principalmente quando o índice é uma informação relevante ao invés só do número do índice ou quando queremos pegar alguma linha específica do dataframe.
        
        display(novo_produtos_df.loc['Contoso Wireless Laser Mouse E50 Grey'])

    iloc:
        enxerga o dataframe como linhas e colunas e consegue pegar o valor com um número de linha e um número de coluna. 
        Repara que ele não analisa o valor do índice da linha e da coluna, apenas a posição importa.
        
        display(novo_produtos_df.iloc[1])
    
    Alteração de um elemento com Loc:
        novo_produtos_df.loc['Contoso Wireless Laser Mouse E50 Grey', 'Preco Unitario'] = 23
        novo_produtos_df.loc[novo_produtos_df['ID Produto'] == 873, ['Preco Unitario']] = 22


AULA_11: Exportando para csv

    Exportar Dataframe pa csv:
        vendas_df.to_csv('Novo Vnedas 2017.csv', sep=';')
        vendas_df.to_csv(r'C:\Users\Kiko\Documents\Projetos Programação\Especializacao-em-Analise-de-Dados\06. Trilha Impressionadora - Especialização em Python\48. Análise de Dados com o Pandas + Integração Python e Excel\Pandas e csv\Novo Vnedas 2017.csv', sep=';')

    Trnasformar dicionario em Dataframe:
        vendas_produtos_df = pd.DataFrame.from_dict(vendas_produtos, orient='index') 
            #from_dict -> Documentação
            #orient='index' -> Documentação, passando as chaves do dicionario para indice
    
    Renomeando colunas (Já vimos anteriomente):
        vendas_produtos_df = vendas_produtos_df.rename(columns={0: 2019})
        vendas_produtos_df = vendas_produtos_df.rename(columns={1: 2020})
    
    Exportar Dataframe pa csv:
        vendas_df.to_csv('Novo Vendas Produtos.csv', sep=';', encoding='latin1')


AULA_12: Lendo um csv diretamente da internet

    Caso 1: csv direto no link
        url = 'https://drive.google.com/uc?authuser=0&id=1Ru7s-x3YJuStZK1mqr_qNqiHVvdHUN66&export=download'
        cotaca_df = pd.read_csv(url)
        display(cotaca_df)
    
    Caso 2: csv em uma requisição que precisa ser tratada
        url  = 'https://portalweb.cooxupe.com.br:9080/portal/precohistoricocafe_2.jsp'
        conteudo_url = requests.get(url).content
        arquivo = io.StringIO(conteudo_url.decode('cp1252'))
        cafe_df = pd.read_csv(arquivo, sep=r'\t', engine='python')


AULA_13: Obs: Integração de Python com Excel - Pandas ou openpyxl

    1. Pandas
        Mais usada no geral
        Trata o Excel como uma base de dados
        Faz o que quiser com o arquivo
        Pode desfazer a estrutura original do arquivo, caso queira editar
    
    2. Openpyxl
        Trata o Excel como uma planilha mesmo que pode ter várias coisas
        Edita "como se fosse um VBA"
        Menos eficiente
        Mantém mais a estrutura original do arquivo, mas cuidado porque não necessariamente tudo, então tem que testar


AULA_14: Criando uma barra de progresso em Python - tqdm

    from tqdm import tqdm
    pbar = tqdm(total=len(vendas_df['ID Loja']), position=0, leave=True)
        "TOTAL: Passar tamanha da lista/coluna a ser percorrida, outros 2 parametro é para deixa a barra em uma linha só"

    for i, id_loja in enumerate(vendas_df['ID Loja']):
        pbar.update()
    

AULA_15: Exercício Desafio pandas - Mini Projeto Análise de Dados

    Explicação dos exercicios do projeto.


AULA_16: Exercício Desafio pandas - Importação e Tratamento de Dados

    Exercício OK


AULA_17: Exercício Desafio pandas - Exercício 1

    Exercício OK


AULA_18: Exercício Desafio pandas - Exercício 2
    
    Exercício OK


AULA_19: Exercício Desafio pandas - Exercício 3

    Exercicio OK


AULA_20: Exercício Desafio pandas - Exercício 4

    Exercicio OK


AULA_21: Exercício Desafio pandas - Exercício 5

    Exercicio OK


AULA_23: Onde pegar exercícios de análise de dados- Kaggle

    Bases de dados para projetos:
        https://www.kaggle.com/
    
    Exercicio OK

