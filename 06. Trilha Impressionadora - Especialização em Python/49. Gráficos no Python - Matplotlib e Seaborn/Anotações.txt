AULA_1: Orientações - Assista antes de começar

    Explicações do modulo


AULA_2: Matplotlib - Anatomia de uma figura

    "Nasceu para substitir Matlab"
    
    Documentação: https://matplotlib.org/stable/gallery/showcase/anatomy.html


AULA_3: Matplotlib - Primeiros exemplos

    Matplotlib é uma biblioteca de plotagem em Python que produz figuras de qualidade em uma variedade de formatos impressos e ambientes interativos. 
    `matplotlib.pyplot` é um conjunto de funções, e é geralmente importado sob o alias `plt`.

    Cada função `pyplot` faz alguma alteração em uma figura, como criar uma figura, criar uma área de plotagem em uma figura, 
    plotar algumas linhas em uma área de plotagem, decorar a plotagem com rótulos, etc.

    `plt.figure()`: Cria uma nova figura.
    `plt.plot()`: Plota y versus x como linhas e/ou marcadores.
    `plt.scatter()`: Plota um gráfico de dispersão de y versus x.
    `plt.bar()`: Plota um gráfico de barras.
    `plt.xlabel()`: Define o rótulo do eixo x.
    `plt.ylabel()`: Define o rótulo do eixo y.
    `plt.title()`: Define um título para os eixos.
    `plt.grid()`: Configura as linhas da grade.
    `plt.legend()`: Coloca uma legenda no eixo.
    `plt.show()`: Exibe uma figura.


AULA_4: Matplotlib - Paleta de cores - parte 1

    Gráfico Pizza:
        plt.pie(quantidades, labels=categorias)
        plt.show()
    
    autopct e explode:
        destaque = [0, 0, 0, 0.1]
        plt.pie(quantidades, labels=categorias, autopct='%.1f', explode=destaque)
        "O `autopct` é usado para mostrar os valores percentuais."
        "O `explode` é usado para destacar fatias da Pizza de acordo com a lista declarada anteriormente."

    Mudar peleta de cores dos graficos:
        cores = plt.get_cmap('Pastel2').colors 
        plt.pie(quantidades, labels=categorias, autopct='%.1f', explode=destaque, colors=cores)
        Documentação: https://matplotlib.org/stable/tutorials/colors/colormaps.html


AULA_5: Matplotlib - Paleta de cores - parte 2

    Grafico de barras empilhado:
        plt.bar(anos, vendas_online, label='Online')
        plt.bar(anos, vendas_loja, bottom=vendas_online, label='Loja')
        plt.legend()
        "É necessario bottom para empilhar os graficos"
        "label e Legend para adicionar legendas e saber qual informação de cada barra"

    Separa as barra de ano em ano:
        plt.xticks(ticks=anos)
    
    Alterar cores das barras:
        cores = plt.get_cmap('Pastel2').colors
        plt.bar(anos, vendas_online, label='Online', color=cores[0])
        plt.bar(anos, vendas_loja, bottom=vendas_online, label='Loja', color=cores[1])

    Cycler para mudar as cores automatico:
        from cycler import cycler
        cores_cycler = cycler('color', plt.get_cmap('Pastel2').colors)
        plt.rc('axes', prop_cycle=cores_cycler)
        "A partir destas funções todos graficos serão plotados com o tema escolhido"


AULA_6: Matplotlib - exercícios - gráfico de linhas

    exercício OK


AULA_7: Matplotlib - exercícios - gráfico de barras

    exercício OK

    Rotação nos rotulos do grafico:
        plt.xticks(ano, rotation=45)

AULA_8: Matplotlib - exercícios - gráfico de dispersão

    exercício OK

    Mudar tipo da grade de graficos:
        plt.grid(True, linestyle='--')
        "Linestyle serve para todas linhas em geral"

    Tamanho e Cor do ponto no grafico de dispersão:
        plt.scatter(ano, receita, s=receita, c=receita, cmap='Reds')
        "Tamanho do Ponto sera de acordo com aquantidade de receita (Parametro S)"
        "Cor do Ponto sera de acordo com aquantidade de receita (Parametro C e CMAP)"
        "para pegar do mais escuro para o mais claro na cor (cmap='Red_s')"

    Barra de escla de cor com legenda:
        plt.colorbar()


AULA_9: Matplotlib - exercícios - gráfico de pizza

    exercício OK

    Adicionar Sombra no grafico:
        plt.pie(participacao, labels=fabricante, autopct='%.1f', explode=destaque, shadow=True)
        "Parametro Shadow = True"


AULA_10: Matplotlib - Gráfico de linha para apresentação - parte 1

    exercício OK

    Seta e anotação no grafico:
        plt.annotate('Menor Valor', color='red', xy=(2, 78), xytext=(3, 80), arrowprops=dict(facecolor='Red'))

    For para mudar marcadores dinamicamente com Numpy;


AULA_11: Matplotlib - Gráfico de linha para apresentação - parte 2

    exercícios OK

    Faixa de destaque:
        plt.axvspan(6, 11, alpha=0.15, color=cores[1])
        plt.text(6, 80, 'Recuperação de Crescimento', color='green', fontsize=9, weight='bold')

    Rotulo de valores no grafico:
        plt.annotate(vendas[posicao], color=cor, xy=(meses[posicao], vendas[posicao]), xytext=(-5, -5), textcoords='offset points')
        "Adicionar ao for que passar pelos valores"


AULA_12: Matplotlib - Gráfico de barras para apresentação - parte 1

    exercício OK

    Destacar barra com valor maximo:
        for i, barra in enumerate(barras):
            if i != quantidades.index(max(quantidades)):
                barras[i].set_color(cores[2])
                barras[i].set_alpha(0.5)


AULA_13: Matplotlib - Gráfico de barras para apresentação - parte 2

    Ordenar 2 listas:
        print(zip(quantidades, produtos)) #Compacta as duas listas em tupla
        print(list(zip(quantidades, produtos))) #passa para uma lista
        print(sorted(list(zip(quantidades, produtos)))) #ordena as tuplas
    
    Pegar valores ordenados da lista de tuplas:
        quantidades_ordenado = [dado[0] for dado in dados_ordenado]
        produtos_ordenado = [dado[1] for dado in dados_ordenado]
    
    Inverter Ordem das barras pelo eixo da figura:
        plt.gca().invert_yaxis()


AULA_14: Matplotlib - Gráfico de barras empilhadas para apresentação

    exercício OK

    Rotulos da dados centraliados no barras empilhadas:
        barra_online = plt.bar(anos, vendas_online, label='Online')
        plt.bar_label(barra_online, labels=vendas_online, label_type='center', fontweight='bold')


AULA_15: Matplotlib - exercícios - gráfico de barras para apresentação

    Exercícios OK


AULA_16: Matplotlib - exercícios - gráfico de linhas para apresentação

    Exercícios OK

    Marcadores de linhas no primeiro e ultimo elemento:
        for posicao in (-1, 0):
            plt.scatter(anos[posicao], refeicoes[posicao], color=cor_anotacoes)
            plt.annotate(refeicoes[posicao], xy=(anos[posicao], refeicoes[posicao]), xytext=(5, 0), textcoords='offset points', color=cor_anotacoes, fontweight='bold')
 
    Area de destaque:
        plt.axvspan(2020, 2021, alpha=0.5, color=cores[1], zorder=0)
    
    Texto de anotação no grafico:
        plt.text(2020, 40000, 'Pandemia', fontsize=11, fontweight='bold', color=cor_anotacoes)

    ZORDER:
        Ordena as camadas da figura (qual grafico vai em baixo, em cima, etc...)


AULA_17: Matplotlib - introdução poo

    A API Orientada a Objetos, por outro lado, dá mais controle sobre seus gráficos. 
    Você pode trabalhar diretamente com instâncias de `Figure` e `Axes`, permitindo que você manipule cada aspecto do seu gráfico. 
    Isso é especialmente útil para gráficos mais complexos e para a criação de visualizações mais personalizadas.

    "Permite cirar varios graficos em uma figura"


AULA_18: Matplotlib - poo gráficos simples

    "Mudança na contrução dos graficos, para ter uma maior controle dos eixos e fazer figuras mais complexas."

    "No novo formato utilizamos o plt.subplots e fazemos como se fosse um Unpacking, apartir didsso o PLT vira AX."    
        fig, ax = plt.subplots()
        ax.bar(anos, vendas_online, label='Online')
        ax.bar(anos, vendas_loja, bottom=vendas_online, label='Loja')


AULA_19: Matplotlib - poo mais de um eixo y

    Setar cores em variaves:
        cor_temperatura = 'tab:red'
        cor_precipitacao = 'tab:blue'

    Adicionar outro grafico na mesma figura, mas com um eixo diferente:
        ax2 = ax1.twinx()

    Legenda do grafico com posicionamento ajustado:
        fig.legend(bbox_to_anchor=(0.75, 1), bbox_transform=ax1.transAxes)


AULA_20: Matplotlib - poo múltiplos sistemas de eixo

    Painel de graficos:
        fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(12, 10))
            axs[0,0]    axs[0,1]
            axs[1,0]    axs[1,1]


AULA_21: Matplotlib - poo mosaico

    Painel de graficos com Mosaico:
        mosaico = 'AA;BB;CD'
        fig = plt.figure(figsize=(12,10))
        axs = fig.subplot_mosaic(mosaico)
            axs['A']    axs['A']
            axs['B']    axs['B']
            axs['C']    axs['D']
        
    Espaçamento entre os graficos:
        espacamento = {'wspace': 0.3, 'hspace': 0.5}
        axs = fig.subplot_mosaic(mosaico, gridspec_kw=espacamento)


AULA_22: Matplotlib - exercícios

    Exercícios OK

    "Utilizando Mosaico"


AULA_23: Matplotlib - plt para poo

    Exercícios OK

    "alteração dos graficos de plt para ax (eixo)"


AULA_24: Matplotlib - criando nosso mosaico

    Exercícios OK

    "alteração dos graficos de ax para Mosaico"


AULA_25: Matplotlib - estilos

    Alterar tema das figuras:
        Documentação: https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html

        plt.style.use('bmh')


AULA_26: Matplotlib - Entendendo a estrutura de um estilo

    Mudar cor de algum elemento manualmente:
        "utilizar parametro color ou set_color ='C(n°_Cor)'"

        plt.bar_label(barras, labels=quantidades, color='C2')
        barras[1].set_color('C3')


AULA_27: Matplotlib - Personalizando estilos

    Alterar valor e stilo nos elementos padrões:
        params = {
            'axes.titlecolor': 'dimgray',
            'figure.figsize': (12, 10)
        }
        "A partir desta alteração na raiz todo elementos serão alterados como padrão pelos novos valores"
        "Podemos alterar, grid, titulo, figura, etc.."

        Documentação: https://matplotlib.org/stable/api/matplotlib_configuration_api.html#matplotlib.rcParams


AULA_28: Matplotlib - Criando seu próprio estilo

    Para criar seu próprio estilo: 
        você precisa criar um arquivo de configuração que define as configurações de estilo que você deseja usar. 
        Este arquivo deve ser um arquivo `.mplstyle`, que é basicamente um arquivo de texto que contém uma série de configurações no formato `chave: valor`.

        meu_estilo.mplstyle:
            axes.titlesize : 24
            axes.labelsize : 20
            xtick.labelsize : 16
            ytick.labelsize : 16

    Usar stilos que ja esxitem como base:
        Diretorio: C:\Users\Kiko\AppData\Local\Programs\Python\Python312\Lib\site-packages\matplotlib\mpl-data\stylelib
        "A partir dele voce pode editar o seu."

        "Tabem pode auterar o Cycle do estilo padrão e criar sua propria palheta"
            axes.prop_cycle    : cycler('color', ['ace8f2', 'f2ace8', 'e8f2ac'])


AULA_29: Matplotlib - O Matplotlib por baixo do Pandas

    O Pandas é uma biblioteca que permite a manipulação de dados de forma simples e eficiente. 
    Ela é construída sobre o NumPy e permite a manipulação de dados de forma simples e eficiente. 
    Quanto a gráficos, o Pandas utiliza o Matplotlib como base para a geração de gráficos.

    "Podemos utilizar todas funcionalidades do matplotlib no pandas para gerar graficos, a sintaxe é praticamente a mesma"
        df_top_10_ibov.plot(figsize=(10, 8), title='TOP 10 Ações', subplots=True, layout=(5, 2))


AULA_30: Matplotlib - Pandas para Matplotlib

    Mostrar figuras do mesmo tipo com for:
        for i, banco in enumerate(bancos):
            axs[i].plot(variacao_diaria.index, variacao_diaria[banco], label=banco, color=f'C{i}')
            axs[i].legend()

    Deixar somente a data uma figura, quando todas compartilhar do mesmo eixo:
        fig, axs = plt.subplots(nrows=3, ncols=1, SHAREX=True)


AULA_31: Matplotlib - Pandas para Matplotlib - parte 2

    função nativa do python que gera combinções com elementos:
        from itertools import combinations 
        pares_bancos = list(combinations(bancos, 2))

    Mostrar figuras do mesmo tipo com for (pares):
        for i, par in enumerate(pares_bancos):
            axs[i].scatter(par[0], par[1], data=df_top_10_ibov, color=f'C{i}')
            axs[i].set_xlabel(par[0])
            axs[i].set_ylabel(par[1])
            axs[i].set_title(f'{par[0]} x {par[1]}')


AULA_32: Matplotlib - Visualizações específicas do Pandas

    O método `corr()` do Pandas calcula a correlação entre as variáveis de um DataFrame.
        Os valores da correlação variam entre -1 e 1. Quando a correlação é -1, significa que as variáveis possuem uma correlação negativa perfeita. 
        Quando a correlação é 1, significa que as variáveis possuem uma correlação positiva perfeita. 
        Quando a correlação é 0, significa que as variáveis não possuem correlação. 
        Quanto mais próximo de 1 ou -1, mais forte é a correlação. 
        Quanto mais próximo de 0, mais fraca é a correlação.
    
    Aplicar um estilo de gradiente de cores no DataFrame:
        df_top_10_ibov.corr().style.background_gradient(cmap='coolwarm_r')
        "O sufixo `_r` indica que o gradiente de cores será aplicado de forma reversa"
    
    ajustando o valor minimo e maximo do df, Para escala de cores ficer correta:
        background_gradient(cmap='coolwarm_r', vmin=-1, vmax=1)


AULA_33: Matplotlib - Visualizações específicas do Pandas - parte 2
    
    Outra visualização disponível no Pandas é o `scatter_matrix`:
        O `scatter_matrix` é uma visualização que permite a visualização de gráficos de dispersão entre todas as variáveis de um DataFrame. 
        Na diagonal principal, são exibidos os histogramas das variáveis. 
        Um histograma é um gráfico de barras que mostra a frequência de ocorrência de valores em um conjunto de dados, permitindo a visualização da distribuição dos dados.
    
    Agupamento utilizado pelo scatter_matrix:
        df_top_10_ibov['VALE3'].value_counts(bins=10).sort_index()

    Editando quantidade de agupramento do scatter_matrix:
        scatter_matrix(df_top_10_ibov, figsize=(12,12), hist_kwds={'bins': 5, 'edgecolor': 'black'})


AULA_34: Seaborn - Introdução

    o Seaborn é construído em cima do Matplotlib, 
    o que significa que ele mantém a flexibilidade e a capacidade de personalização do Matplotlib, 
    enquanto adiciona uma interface de alto nível que torna a criação de gráficos comuns mais simples e direta.

    o Seaborn tem excelente integração com o Pandas, 
    o que significa que ele pode trabalhar diretamente com DataFrames do Pandas. 
    Isso torna o Seaborn uma escolha natural se você já está usando o Pandas para manipular seus dados.


AULA_35: Seaborn - temas

    No Seaborn, um tema é a combinação de estilo, contexto e paleta de cores que juntos definem a aparência de um gráfico.

    sns.set_theme(style='dark', context='notebook', palette='colorblind')

    "Paletas de cores do matplotlib valem no Seaborn"

