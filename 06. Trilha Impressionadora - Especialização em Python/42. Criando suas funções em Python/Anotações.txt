AULA_1: Functions no Python

    def nome_funcao():
        faça alguma coisa
        faça outra coisa
        return valor_final
    
    "As functions são blocos de código que servem 1 único propósito, fazem uma ação específica."


AULA_2: Retornar um valor na Function

    def nome_funcao():
        return valor_final

    "Uma variavel em uma função, só ficara no escopo da função."


AULA_3: Argumentos e Parâmetros numa Function

    def minha_funcao(parametro1, parametro2, parametro3):
        return parametro1 + parametro2 + parametro3


AULA_4: Aplicação em um Exemplo de argumento

    Exemplo PRATICO


AULA_5: Vários Parâmetros e Tipos de Parâmetros

    Passando 2 parametros
    2 Formas de passar argumento:
        1. Em ordem; #if ehdacategoria(produto, 'BSA'):
        2. com nome do argumento. #if ehdacategoria(categoria='BSA', bebida=produto):
    
    Exemplo PRATICO


AULA_6: Exercícios de Function - Exercicios 1

    Exercicios OK


AULA_7: Dicas e Exemplos com Argumentos em Function

    upper() -> Não tem paramentros
    sort() -> apenas paramentros Keyword (palavra chave)
    extend(lista) -> 1 parametro obrigatorio
    ehdacategoria (bebida, categoria) -> 2 paramentros de posição 

    "SHIFT + TAB: pop up de instrução da função."


AULA_8: Valores Padrões para Argumentos

    "Nesse caso o valor não será obrigatorio, porque, ja tem um pré carregado."
    def minha_funcao(argumento = valor_padrao):
        ...
        return ...
    
    "AO PERCORRER UMA LISTA, SE ATENTAR Q MUDAR A variavel Item é diferente da lista_itens[i] (Assim como no exemplo padronizar_codigos())"


AULA_9: Falando mais sobre o return nas Functions

    "Podemos usar no return praticamente qualquer tipo de objeto: (número, string, lista, tupla, dicionário, outros objetos, etc.)"
    "O return, se for executado, encerra a função, mesmo que dentro dela haja um loop."


AULA_10: Exercícios de Function - Exercicios 2

    Exercicios OK


AULA_11: Return com mais de uma informação

    "É possível retornar mais de um valor"
    "basta retornar como uma tupla com 2 itens"


AULA_12: Exercícios de Function - Exercicios 3

    Exercicios OK


AULA_13: Desafio de Return com Vários Objetos

    Desafio OK


AULA_14: Docstring e Annotations

    Docstring:
        diz o que a função faz, quais valores ela tem como argumento e o que significa cada valor
    
    Annotation: 
        diz o que devem ser os argumentos e o que a função retorna

    def minha_soma(num1, num2, num3):
        '''Faz a soma de 3 números inteiros e devolve como resposta um inteiro
        Parameters:
            num1 (int): primeiro número a ser somado
            num2 (int): segundo número a ser somado
            num3 (int): terceiro número a ser somado
        Returns:
            soma (int): o valor da soma dos 3 números dados como argumento
        '''
        return num1 + num2 + num3


AULA_15: Exceções e Erros em Funções

    try:
        o que eu quero tentar fazer
    except:
        o que vou fazer caso dê erro

    "Não colocar bloco extenso no try"

    raise Exception('O erro foi esse')
        "Menssagem se erro personalizada"
    

AULA_16: Múltiplos Argumentos para uma Function

    Quando você quer permitir uma quantidade indefinida de argumentos, usa o * para isso.

    def minha_funcao(*args):
    ...
        "Permite passar argumentos ilimitados para função"

    **kwargs para keyword arguments -> argumentos vêm em formato de dicionário
    def minha_funcao(**kwargs):
        "Permite passar argumentos ilimitados para função, como dicionário (chave=valor)"


AULA_17: Ordem dos Tipos de Argumento

    Sempre os positional arguments vêm antes e depois os keywords arguments.
    Sempre os argumentos individuais vêm antes e depois os "múltiplos"

    def minha_funcao(arg1, arg2, arg3, arg4, *args, k = kwarg1, k2 = kwarg2, k3 = kwarg3, **kwargs):